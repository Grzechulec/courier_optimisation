@{
    ViewData["Title"] = "Home Page";
}
<body>
    <link rel="stylesheet" type="text/css" href="~/style.css" />
</body>

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>

<input type="button"
       value="Generate Paths"
       onclick="location.href='@Url.Action("Test", "Home")'" />


@using (Html.BeginForm("Upload", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    <input type="file" name="file" />
    <input type="submit" value="Wyślij" />
}


<div class="container">
    <div class="left">
        <div class="top">
            @foreach (var point in Model.Points)
            {
                @point.PrintPoint();
                <br />
            }
        </div>
        <div class="bottom">
            @foreach (var path in Model.Paths)
            {
                @String.Join(" ", path);
                <br />
            }
        </div>
    </div>
    <div class="right">
        <canvas id="myCanvas" width="500" height="500"></canvas>
    </div>
</div>

<script>
    var canvas = document.getElementById('myCanvas');
    var context = canvas.getContext('2d');

    context.fillStyle = 'lightgray';
    context.fillRect(0, 0, canvas.width, canvas.height);
    context.fillStyle = 'red';

    var json = '@Html.Raw(Model.Json)';
    var points = JSON.parse(json);

    points.forEach(point => {
        console.log('Punkt: (' + point.X + ', ' + point.Y + ')');
        context.fillRect(point.X*(canvas.width/100), point.Y*(canvas.height/100), 10, 10);
    });

    context.fillStyle = 'blue';
    context.beginPath();
    context.moveTo(points[0].X * (canvas.width / 100), points[0].Y * (canvas.height / 100));
    context.lineTo(points[3].X * (canvas.width / 100), points[3].Y * (canvas.height / 100));
    context.lineTo(points[4].X * (canvas.width / 100), points[4].Y * (canvas.height / 100));
    context.lineTo(points[8].X * (canvas.width / 100), points[8].Y * (canvas.height / 100));
    context.lineTo(points[9].X * (canvas.width / 100), points[9].Y * (canvas.height / 100));
    context.lineTo(points[0].X * (canvas.width / 100), points[0].Y * (canvas.height / 100));
    context.stroke();
</script>